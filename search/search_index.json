{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NN2FPGA","text":""},{"location":"#introduction","title":"Introduction","text":"<p>NN2FPGA is a framework which generates quantized convolution neural networs accelerators in C++ for AMD FPGAs. The main goal of this project is to provide a tool targeting embedded FPGAs keeping state-of-the-art performance. Tha main addition to the state-of-the-art is the support for resnet-like models with specific optimizations for the skip connections.</p> <p>The project is completely open-source, and it is released under the MIT license. We would be happy to receive contributions from the community.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<p>A machine with a Linux distribution (tested on Centos8 and Ubuntu 20.04) and a recent version of the Xilinx suite (tested with Vivado/Vitis HLS 2022.1 and 2022.2) is required. The python environment is managed with conda, so it is required to have a recent version of conda installed. To perform the whole flow, it is required to have a Xilinx FPGA board with a Vitis license.</p>"},{"location":"#installation_1","title":"Installation","text":"<p>To install the framework, it is required to clone the repository and to install the python environment.</p> <pre><code>git clone git@github.com:minnellf/NN2FPGA.git\ncd NN2FPGA\nconda env create -f nn2fpga.yml\nconda activate nn2fpga\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#quick-start","title":"Quick start","text":"<p>To run the framework, it is required to have a trained model in the QONNX format. The framework is able to convert models from the ONNX format to the C++ code. To convert a model, it is required to run the following commands:</p> <pre><code>cd nn2fpga\nmake all TOP_NAME=${TOP_NAME} BOARD=${BOARD} ONNX_PATH=../test/onnx/${TOP_NAME}.onnx DATASET=cifar10 \n</code></pre> <p>The framework will generate the C++ code in the <code>work</code> folder, synthesize the <code>HLS</code> code, generate the block design and the bitstream. To deploy the bitstream on the FPGA, it is required to run the following command:</p> <pre><code>make deploy TOP_NAME=${TOP_NAME} BOARD=${BOARD} ONNX_PATH=../test/onnx/${TOP_NAME}.onnx DATASET=cifar10 \n</code></pre> <p>Supported boards are <code>ULTRA96v2</code> and <code>KRIA KV260</code>. Right now the framework is fully working for classification datasets, but we are extending it to object detection and segmentation.</p> <p>For more information, please refer to the paper where we implemented Resnet-8 and Resnet-20 for the CIFAR-10 dataset reaching state-of-the-art performance.</p>"},{"location":"build_docs/","title":"How to build docs","text":""}]}