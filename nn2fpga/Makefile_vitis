.PHONY: help

help:
	@echo "Makefile Usage:"
	@echo "  make all TARGET=<sw_emu/hw_emu/hw> PLATFORM=<FPGA platform>"
	@echo "      Command to generate the design for specified Target and Shell."
	@echo ""
	@echo "  make clean "
	@echo "      Command to remove the generated non-hardware files."
	@echo ""
	@echo "  make cleanall"
	@echo "      Command to remove all the generated files."
	@echo ""
	@echo "  make test PLATFORM=<FPGA platform>"
	@echo "      Command to run the application. This is same as 'run' target but does not have any makefile dependency."
	@echo ""
	@echo "  make run TARGET=<sw_emu/hw_emu/hw> PLATFORM=<FPGA platform>"
	@echo "      Command to run application in emulation."
	@echo ""
	@echo "  make build TARGET=<sw_emu/hw_emu/hw> PLATFORM=<FPGA platform>"
	@echo "      Command to build xclbin application."
	@echo ""
	@echo "  make host"
	@echo "      Command to build host application."
	@echo ""



############################## Setting up Project Variables ##############################

# Including the settings.
include settings.mk

ifndef BOARD
$(error ERROR! Please, provide the target board via BOARD)
endif

ifndef ONNX_PATH
$(error ERROR! Please, provide the ONNX file path via ONNX_PATH)
endif

ifndef TOP_NAME
$(error ERROR! Please, provide the design top name via TOP_NAME)
endif

ifndef XILINX_VITIS
$(error ERROR! XILINX_VITIS variable is not set, please set correctly using "source <Vitis_install_path>/Vitis/<Version>/.settings64.sh" and rerun)
endif

ifndef XILINX_HLS
$(error ERROR! XILINX_HLS variable is not set, please set correctly using "source <Vitis_HLS_install_path>/Vitis_HLS/<Version>/.settings64.sh" and rerun)
endif

check-xrt:
ifndef XILINX_XRT
$(error ERROR! XILINX_XRT variable is not set, please set correctly using "source /opt/xilinx/xrt/setup.sh" and rerun)
endif

device2xsa = $(strip $(patsubst %.xpfm, % , $(shell basename $(PLATFORM))))

XSA := 
ifneq ($(PLATFORM), )
XSA := $(call device2xsa, $(PLATFORM))
endif

MK_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))
COMMON_REPO ?= $(shell bash -c 'export MK_PATH=$(MK_PATH); echo $${MK_PATH%/*}')
PWD = $(shell readlink -f .)
TARGET := hw
VPP_LDFLAGS :=

#include ./utils.mk

TEMP_DIR := ./_x.$(TARGET).$(XSA)
BUILD_DIR := ./build_dir.$(TARGET).$(XSA)

LINK_OUTPUT := $(BUILD_DIR)/$(TOP_NAME).link.xclbin
PACKAGE_OUT = ./package.$(TARGET)

VPP_PFLAGS := 
CMD_ARGS = -x $(BUILD_DIR)/$(TOP_NAME).xclbin

############################## Setting up Host Variables ##############################

#Include Required Host Source Files
CXXFLAGS := -I$(TB_ROOT)/common/cmdparser
CXXFLAGS += -I$(TB_ROOT)/common/logger
CXXFLAGS += -I$(NN2FPGA_ROOT)/cc/include 
CXXFLAGS += -I$(TB_ROOT)/$(DATASET)/include 
CXXFLAGS += -I$(PRJ_ROOT)/cc/include
CXXFLAGS += -I$(PRJ_ROOT)/cc/src
CXXFLAGS += -I$(XILINX_XRT)/include
CXXFLAGS += -I$(XILINX_VIVADO)/include
CXXFLAGS += -I$(XILINX_HLS)/include
CXXFLAGS += -Wno-attributes
CXXFLAGS += -Wno-unknown-pragmas
CXXFLAGS += -O0
CXXFLAGS += -g
CXXFLAGS += -std=c++17
CXXFLAGS += -fmessage-length=0

HOST_SRCS = $(TB_ROOT)/common/cmdparser/cmdlineparser.cpp $(TB_ROOT)/common/logger/logger.cpp $(TB_ROOT)/$(DATASET)/network_vitis_tb.cc
#HOST_SRCS = $(PRJ_ROOT)/cc/src/memory_management_$(TOP_NAME).cc $(TB_ROOT)/$(DATASET)/network_tb.cc
#HOST_SRCS = $(TB_ROOT)/$(DATASET)/network_tb_vitis.cc

# Host compiler global settings
LDFLAGS += -lrt -lstdc++ 
LDFLAGS += -luuid -lxrt_coreutil -pthread
LDFLAGS += -L$(XILINX_XRT)/lib -pthread -lOpenCL

############################## Kernel Source Files Repository##########################
SRC_REPO := $(PRJ_ROOT)/cc/src
KERNEL_SRC_CPP := $(SRC_REPO)/$(TOP_NAME).cc
KERNEL_INCLUDES := -I$(PRJ_ROOT)/cc/include

############################## Setting up Kernel Variables ##############################
# Kernel compiler global settings
VPP_FLAGS += --save-temps
VPP_FLAGS += --config $(TOP_NAME)_hls.cfg
# VPP_FLAGS += --profile_kernel data:all:all:all

# VPP_LDFLAGS += --vivado.synth.jobs 4
# VPP_LDFLAGS += --vivado.impl.jobs 4
VPP_LDFLAGS += --config vitis_link.cfg
# VPP_LDFLAGS += --profile_kernel data:all:all:all

EXECUTABLE = ./$(TOP_NAME)
EMCONFIG_DIR = $(TEMP_DIR)

############################## Setting Targets ##############################
.PHONY: all clean cleanall docs emconfig
all: $(EXECUTABLE) $(BUILD_DIR)/$(TOP_NAME).xclbin emconfig

.PHONY: host
host: $(EXECUTABLE)

.PHONY: build
build: $(BUILD_DIR)/$(TOP_NAME).xclbin

.PHONY: xclbin
xclbin: build

############################## Setting Rules for Binary Containers (Building Kernels) ##############################
$(TEMP_DIR)/$(TOP_NAME).xo: $(PRJ_ROOT)/cc/src/$(TOP_NAME).cc
	mkdir -p $(TEMP_DIR)
	v++ -g -c $(VPP_FLAGS) -t $(TARGET) --platform $(PLATFORM) -k $(TOP_NAME) --temp_dir $(TEMP_DIR) -I$(PRJ_ROOT)/cc/include -I$(PRJ_ROOT)/cc/src -I$(PRJ_ROOT)/../nn2fpga/cc/include/ -o'$@' '$<'

$(TEMP_DIR)/mm2s_a.xo: $(PRJ_ROOT)/cc/src/mm2s_activations.cc
	mkdir -p $(TEMP_DIR)
	v++ -g -c $(VPP_FLAGS) -t $(TARGET) --platform $(PLATFORM) -k mm2s_activations --temp_dir $(TEMP_DIR) -I$(PRJ_ROOT)/cc/include -I$(PRJ_ROOT)/../nn2fpga/cc/include/ -o'$@' '$<'

$(TEMP_DIR)/mm2s_w.xo: $(PRJ_ROOT)/cc/src/mm2s_weights.cc
	mkdir -p $(TEMP_DIR)
	v++ -g -c $(VPP_FLAGS) -t $(TARGET) --platform $(PLATFORM) -k mm2s_weights --temp_dir $(TEMP_DIR) -I$(PRJ_ROOT)/cc/include -I$(PRJ_ROOT)/../nn2fpga/cc/include/ -o'$@' '$<'

$(TEMP_DIR)/s2mm.xo: $(PRJ_ROOT)/cc/src/s2mm_outputs.cc
	mkdir -p $(TEMP_DIR)
	v++ -g -c $(VPP_FLAGS) -t $(TARGET) --platform $(PLATFORM) -k s2mm_outputs --temp_dir $(TEMP_DIR) -I$(PRJ_ROOT)/cc/include -I$(PRJ_ROOT)/../nn2fpga/cc/include/ -o'$@' '$<'

$(BUILD_DIR)/$(TOP_NAME).xclbin: $(TEMP_DIR)/$(TOP_NAME).xo $(TEMP_DIR)/mm2s_a.xo $(TEMP_DIR)/mm2s_w.xo $(TEMP_DIR)/s2mm.xo
	mkdir -p $(BUILD_DIR)
	v++ -g -l  $(VPP_FLAGS) $(VPP_LDFLAGS) -t $(TARGET) --platform $(PLATFORM) --temp_dir $(TEMP_DIR) -o $(LINK_OUTPUT) $(+)
	v++ -p $(LINK_OUTPUT) $(VPP_FLAGS) -t $(TARGET) --platform $(PLATFORM) --package.out_dir $(PACKAGE_OUT) -o $(BUILD_DIR)/$(TOP_NAME).xclbin

############################## Setting Rules for Host (Building Host Executable) ##############################
$(EXECUTABLE): $(HOST_SRCS) | check-xrt
	g++ -o $@ $^ $(CXXFLAGS) $(LDFLAGS)

emconfig:$(EMCONFIG_DIR)/emconfig.json
$(EMCONFIG_DIR)/emconfig.json:
	emconfigutil --platform $(PLATFORM) --od $(EMCONFIG_DIR)

############################## Setting Essential Checks and Running Rules ##############################
run: all
ifeq ($(TARGET),$(filter $(TARGET),sw_emu hw_emu))
	cp -rf $(EMCONFIG_DIR)/emconfig.json .
	XCL_EMULATION_MODE=$(TARGET) $(EXECUTABLE) $(CMD_ARGS)
else
	$(EXECUTABLE) $(CMD_ARGS)
endif

.PHONY: test
test: $(EXECUTABLE)
ifeq ($(TARGET),$(filter $(TARGET),sw_emu hw_emu))
	XCL_EMULATION_MODE=$(TARGET) $(EXECUTABLE) $(CMD_ARGS)
else
	$(EXECUTABLE) $(CMD_ARGS)
endif

############################## Cleaning Rules ##############################
# Cleaning stuff
clean:
	rm -rf $(EXECUTABLE) $(XCLBIN)/{*sw_emu*,*hw_emu*} 
	rm -rf profile_* TempConfig system_estimate.xtxt *.rpt *.csv 
	rm -rf src/*.ll *v++* .Xil emconfig.json dltmp* xmltmp* *.log *.jou *.wcfg *.wdb

cleanall: clean
	rm -rf build_dir*
	rm -rf package.*
	rm -rf _x* *xclbin.run_summary qemu-memory-_* emulation _vimage pl* start_simulation.sh *.xclbin

