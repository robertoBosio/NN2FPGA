#ifndef NN2FPGA_ACTIVATIONS_UTILS_H_
#define NN2FPGA_ACTIVATIONS_UTILS_H_

#include "ap_int.h"
#include "hls_stream.h"

namespace nn2fpga {

template <typename t_data, int OCH, int c_ops, int c_reuse>
void store_NCHW(hls::stream<t_data> &din, t_data o_data[c_reuse][OCH]) {
  constexpr int c_och_ops = OCH / c_ops;
  for (auto s_och = 0; s_och < c_och_ops; s_och++) {
    for (auto s_reuse = 0; s_reuse < c_reuse; s_reuse++) {
      for (auto s_ops = 0; s_ops < c_ops; s_ops++) {
#pragma HLS pipeline style = stp
        t_data s_data = din.read();
        o_data[s_reuse][s_och * c_ops + s_ops] = s_data;
      }
    }
  }
}

template <typename t_data, int OCH, int c_ops, int c_reuse>
void stream_NHWC(t_data din[c_reuse][OCH], hls::stream<t_data> &o_data) {
  for (auto s_reuse = 0; s_reuse < c_reuse; s_reuse++) {
    for (auto s_och = 0; s_och < OCH; s_och++) {
#pragma HLS pipeline style = stp
      t_data s_data = din[s_reuse][s_och];
      o_data.write(s_data);
    }
  }
}

template <typename t_data, int ICH, int OCH, int OH, int OW, int c_index,
          int c_str, int c_ops, int c_reuse>
void rearrange_op(hls::stream<t_data> &din, hls::stream<t_data> &o_data) {
  /* #pragma HLS inline */

  /* Fix c_ops different than 1 case */
  constexpr int c_o_index = OH * OW / c_reuse;

  for (auto s_o_index = 0; s_o_index < c_o_index; s_o_index++) {
#pragma HLS dataflow

    t_data s_reuse_buffer[c_reuse][OCH];
#pragma HLS array_partition variable = s_reuse_buffer type = complete dim = 1
#pragma HLS stream variable = s_reuse_buffer type = shared

    store_NCHW<t_data, OCH, c_ops, c_reuse>(din, s_reuse_buffer);

    stream_NHWC<t_data, OCH, c_ops, c_reuse>(s_reuse_buffer, o_data);
  }
}

template <typename t_data, int ICH, int c_index, int c_reuse>
void store_NHWC(hls::stream<t_data> din[c_index],
                t_data o_data[c_reuse][ICH][c_index]) {
  for (auto s_reuse = 0; s_reuse < c_reuse; s_reuse++) {
    for (auto s_ich = 0; s_ich < ICH; s_ich++) {
      for (auto s_index = 0; s_index < c_index; s_index++) {
#pragma HLS pipeline style = stp
        t_data s_data = din[s_index].read();
        o_data[s_reuse][s_ich][s_index] = s_data;
      }
    }
  }
}

template <typename t_data, int ICH, int c_index, int c_reuse>
void stream_NCHW(t_data din[c_reuse][ICH][c_index],
                 hls::stream<t_data> o_data[c_index]) {
  for (auto s_ich = 0; s_ich < ICH; s_ich++) {
    for (auto s_reuse = 0; s_reuse < c_reuse; s_reuse++) {
      for (auto s_index = 0; s_index < c_index; s_index++) {
#pragma HLS pipeline style = stp
        t_data s_data = din[s_reuse][s_ich][s_index];
        o_data[s_index].write(s_data);
      }
    }
  }
}

template <typename t_data, int ICH, int OCH, int OH, int OW, int c_index,
          int c_str, int c_ops, int c_reuse>
void arrange_op(hls::stream<t_data> din[c_index],
                hls::stream<t_data> o_data[c_index]) {
  /* #pragma HLS inline */

  /* Fix c_ops different than 1 case */
  constexpr int c_o_index = OH * OW / c_reuse;

  for (auto s_o_index = 0; s_o_index < c_o_index; s_o_index++) {
#pragma HLS dataflow

    t_data s_reuse_buffer[c_reuse][ICH][c_index];
#pragma HLS stream variable = s_reuse_buffer type = shared
#pragma HLS array_partition variable = s_reuse_buffer type = complete dim = 3

    store_NHWC<t_data, ICH, c_index, c_reuse>(din, s_reuse_buffer);

    stream_NCHW<t_data, ICH, c_index, c_reuse>(s_reuse_buffer, o_data);
  }
}

template <typename t_input> 
t_input relu_op(t_input i_data) {
#pragma HLS inline
	if (i_data > 0)
		return i_data;
	else
		return 0;
}


template <typename t_input1, typename t_input2, typename t_output, size_t c_ich1, size_t c_ich2, size_t c_feature_map, size_t c_ops, size_t c_ow_ops_in, size_t c_ow_ops_out>
void concat_op(
  hls::stream<t_input1> din1[c_ow_ops_in],
  hls::stream<t_input2> din2[c_ow_ops_in],
  hls::stream<t_output> o_data[c_ow_ops_out]
) {  

#ifndef __SYNTHESIS__
  std::cout << "INFO: Call to concat_op" << std::endl;
  std::cout << "\t\tc_feature_map: " << c_feature_map << std::endl;
  std::cout << "\t\tc_ich1: " << c_ich1 << std::endl;
  std::cout << "\t\tc_ich2: " << c_ich2 << std::endl;
  std::cout << "\t\tc_och: " << c_ich1 + c_ich2 << std::endl;
  std::cout << "\t\tc_ops: " << c_ops << std::endl;
  std::cout << "\t\tc_ow_ops_in: " << c_ow_ops_in << std::endl;
  std::cout << "\t\tc_ow_ops_out: " << c_ow_ops_out << std::endl;
#endif
  bool s_last = false;
  for (auto s_feature_map = 0; s_feature_map < c_feature_map; s_feature_map+= c_ow_ops_out) {  
    for (auto s_ich = 0; s_ich < c_ich1 + c_ich2; s_ich+=c_ops) {
    #pragma HLS pipeline style = stp
        for (auto s_ow_ops = 0; s_ow_ops < c_ow_ops_in; s_ow_ops++) {
          t_output s_data;
          if (s_ich < c_ich1){
            auto tmp = din1[s_ow_ops].read();
            s_data = *reinterpret_cast<t_output*>(&tmp);// din1[s_ow_ops].read();
          }
          else{
            auto tmp = din2[s_ow_ops].read();
            s_data = *reinterpret_cast<t_output*>(&tmp);//din2[s_ow_ops].read();
          }
          //if last iteration on the wole feature map last is true
          if (s_feature_map == c_feature_map - 1 && s_ich == c_ich1 + c_ich2 - c_ops && s_ow_ops == c_ow_ops_in - 1){
            s_last = true;
          }
          s_data.last = s_last;
          o_data[s_ow_ops].write(s_data);
        }
    }
  }
#ifndef __SYNTHESIS__
  std::cout << "INFO: Finished concat_op" << std::endl;
#endif
}

template <typename t_input, typename t_output, size_t c_ich, size_t c_ih, size_t c_iw, size_t c_upsample,size_t c_ops, size_t c_ow_ops_in>
void upsample_op(
  hls::stream<t_input> din[c_ow_ops_in],
  hls::stream<t_output> o_data[1]
) {
#ifndef __SYNTHESIS__
  std::cout << "INFO: Call to upsample_op" << std::endl;
  std::cout << "\t\tc_ich: " << c_ich << std::endl;
  std::cout << "\t\tc_ih: " << c_ih << std::endl;
  std::cout << "\t\tc_iw: " << c_iw << std::endl;
  std::cout << "\t\tc_upsample: " << c_upsample << std::endl;
  std::cout << "\t\tc_ops: " << c_ops << std::endl;
  std::cout << "\t\tc_ow_ops_in: " << c_ow_ops_in << std::endl;
#endif

  t_input upsample_buff[c_ich][1][c_iw];
  bool s_last = false;
  /* Loop over ih dimentions */
  for(auto s_h = 0; s_h < c_ih ; s_h++) {

    /* Loop over the upsample factor for h dimention */
    for(auto s_upsample_h = 0; s_upsample_h < c_upsample; s_upsample_h++) {
      
      /* Loop over iw dimention*/
      for(auto s_w = 0; s_w < c_iw ; s_w += c_ow_ops_in) {
        
        /* Loop over the stream in input */
        for(auto s_ow_ops_in = 0; s_ow_ops_in < c_ow_ops_in; s_ow_ops_in++){
      
          /* Loop over the upsample factor */
          for(auto s_upsample_w = 0; s_upsample_w < c_upsample; s_upsample_w++) {

            /* Loop over the input channels */
            for(auto s_ich = 0; s_ich < c_ich; s_ich+=c_ops) {
#pragma HLS pipeline style = stp
              t_input s_data[1];
              if (s_upsample_w == 0 && s_upsample_h == 0) {
                s_data[0] = din[s_ow_ops_in].read();
                s_data[0].last = s_last;
                o_data[0].write(*reinterpret_cast<t_output*>(&s_data[0]));
                upsample_buff[s_ich][0][s_w + s_ow_ops_in] = s_data[0];
              } else {
                s_data[0] = upsample_buff[s_ich][0][s_w + s_ow_ops_in];
                //if last iteration on the wole feature map last is true
                if (s_h == c_ih - 1 && s_w == c_iw - c_ow_ops_in && s_ich == c_ich - c_ops && s_upsample_w == c_upsample - 1 && s_upsample_h == c_upsample - 1){
                  s_last = true;
                }
                s_data[0].last = s_last;
                o_data[0].write(*reinterpret_cast<t_output*>(&s_data[0]));
              }
            }
          }
        } 
      } 
    }
  }
#ifndef __SYNTHESIS__
  std::cout << "INFO: Finished upsample_op" << std::endl;
#endif
}

typedef ap_fixed<8, 0 , AP_RND_CONV, AP_SAT> c_t_0;
typedef ap_fixed<8, 1 , AP_RND_CONV, AP_SAT> c_t_1;
typedef ap_fixed<8, 2 , AP_RND_CONV, AP_SAT> c_t_2;
typedef ap_fixed<8, 3 , AP_RND_CONV, AP_SAT> c_t_3;
typedef ap_fixed<8, 4, AP_RND_CONV, AP_SAT> c_t_4;
typedef ap_fixed<8, 5, AP_RND_CONV, AP_SAT> c_t_5;
typedef ap_fixed<8, 6, AP_RND_CONV, AP_SAT> c_t_6;
typedef ap_fixed<8, 7, AP_RND_CONV, AP_SAT> c_t_7;
typedef ap_fixed<8, 8, AP_RND_CONV, AP_SAT> c_t_8;

template <typename c_t>
struct lut{
    static const c_t c[256];
};

// equidistant [-0.5, 0.49609375], leakyrelu, 8 bits (0 int, 8 frac), 256 values
template <>
const c_t_8 lut<c_t_8>::c[256] = {
    0.00000000,  0.00390625,  0.00390625,  0.00781250,  0.00781250,
    0.01171875,  0.01171875,  0.01562500,  0.01562500,  0.01953125,
    0.01953125,  0.02343750,  0.02343750,  0.02734375,  0.02734375,
    0.03125000,  0.03125000,  0.03515625,  0.03515625,  0.03906250,
    0.03906250,  0.04296875,  0.04296875,  0.04687500,  0.05078125,
    0.05078125,  0.05468750,  0.05468750,  0.05859375,  0.05859375,
    0.06250000,  0.06250000,  0.06640625,  0.07031250,  0.07031250,
    0.07421875,  0.07421875,  0.07812500,  0.07812500,  0.08203125,
    0.08593750,  0.08593750,  0.08984375,  0.08984375,  0.09375000,
    0.09375000,  0.09765625,  0.10156250,  0.10156250,  0.10546875,
    0.10546875,  0.10937500,  0.11328125,  0.11328125,  0.11718750,
    0.11718750,  0.12109375,  0.12500000,  0.12500000,  0.12890625,
    0.12890625,  0.13281250,  0.13671875,  0.13671875,  0.14062500,
    0.14453125,  0.14453125,  0.14843750,  0.14843750,  0.15234375,
    0.15625000,  0.15625000,  0.16015625,  0.16406250,  0.16406250,
    0.16796875,  0.17187500,  0.17187500,  0.17578125,  0.17968750,
    0.17968750,  0.18359375,  0.18750000,  0.18750000,  0.19140625,
    0.19140625,  0.19531250,  0.19921875,  0.19921875,  0.20312500,
    0.20703125,  0.21093750,  0.21093750,  0.21484375,  0.21875000,
    0.21875000,  0.22265625,  0.22656250,  0.22656250,  0.23046875,
    0.23437500,  0.23437500,  0.23828125,  0.24218750,  0.24218750,
    0.24609375,  0.25000000,  0.25390625,  0.25390625,  0.25781250,
    0.26171875,  0.26171875,  0.26562500,  0.26953125,  0.26953125,
    0.27343750,  0.27734375,  0.28125000,  0.28125000,  0.28515625,
    0.28906250,  0.29296875,  0.29296875,  0.29687500,  0.30078125,
    0.30078125,  0.30468750,  0.30859375,  -0.18750000, -0.18750000,
    -0.18750000, -0.18750000, -0.18359375, -0.18359375, -0.18359375,
    -0.17968750, -0.17968750, -0.17968750, -0.17968750, -0.17578125,
    -0.17578125, -0.17578125, -0.17578125, -0.17187500, -0.17187500,
    -0.17187500, -0.16796875, -0.16796875, -0.16796875, -0.16406250,
    -0.16406250, -0.16406250, -0.16406250, -0.16015625, -0.16015625,
    -0.16015625, -0.15625000, -0.15625000, -0.15625000, -0.15234375,
    -0.15234375, -0.15234375, -0.14843750, -0.14843750, -0.14843750,
    -0.14453125, -0.14453125, -0.14453125, -0.14453125, -0.14062500,
    -0.14062500, -0.14062500, -0.13671875, -0.13671875, -0.13281250,
    -0.13281250, -0.13281250, -0.12890625, -0.12890625, -0.12890625,
    -0.12500000, -0.12500000, -0.12500000, -0.12109375, -0.12109375,
    -0.12109375, -0.11718750, -0.11718750, -0.11718750, -0.11328125,
    -0.11328125, -0.10937500, -0.10937500, -0.10937500, -0.10546875,
    -0.10546875, -0.10546875, -0.10156250, -0.10156250, -0.09765625,
    -0.09765625, -0.09765625, -0.09375000, -0.09375000, -0.08984375,
    -0.08984375, -0.08984375, -0.08593750, -0.08593750, -0.08203125,
    -0.08203125, -0.08203125, -0.07812500, -0.07812500, -0.07421875,
    -0.07421875, -0.07031250, -0.07031250, -0.07031250, -0.06640625,
    -0.06640625, -0.06250000, -0.06250000, -0.05859375, -0.05859375,
    -0.05859375, -0.05468750, -0.05468750, -0.05078125, -0.05078125,
    -0.04687500, -0.04687500, -0.04296875, -0.04296875, -0.04296875,
    -0.03906250, -0.03906250, -0.03515625, -0.03515625, -0.03125000,
    -0.03125000, -0.02734375, -0.02734375, -0.02343750, -0.02343750,
    -0.01953125, -0.01953125, -0.01562500, -0.01562500, -0.01171875,
    -0.01171875, -0.00781250, -0.00781250, -0.00390625, -0.00390625,
    -0.00000000
};

// equidistant [-1, 0.9921875], leakyrelu, 8 bits (1 int, 7 frac), 256 values
template <>
const c_t_7 lut<c_t_7>::c[256] = {
    0.0000000,  0.0078125,  0.0078125,  0.0156250,  0.0156250,  0.0234375,
    0.0234375,  0.0312500,  0.0312500,  0.0390625,  0.0390625,  0.0468750,
    0.0468750,  0.0546875,  0.0546875,  0.0625000,  0.0625000,  0.0703125,
    0.0781250,  0.0781250,  0.0859375,  0.0859375,  0.0937500,  0.1015625,
    0.1015625,  0.1093750,  0.1093750,  0.1171875,  0.1250000,  0.1250000,
    0.1328125,  0.1328125,  0.1406250,  0.1484375,  0.1484375,  0.1562500,
    0.1640625,  0.1640625,  0.1718750,  0.1718750,  0.1796875,  0.1875000,
    0.1875000,  0.1953125,  0.2031250,  0.2031250,  0.2109375,  0.2187500,
    0.2187500,  0.2265625,  0.2343750,  0.2421875,  0.2421875,  0.2500000,
    0.2578125,  0.2578125,  0.2656250,  0.2734375,  0.2734375,  0.2812500,
    0.2890625,  0.2968750,  0.2968750,  0.3046875,  0.3125000,  0.3203125,
    0.3203125,  0.3281250,  0.3359375,  0.3437500,  0.3437500,  0.3515625,
    0.3593750,  0.3671875,  0.3671875,  0.3750000,  0.3828125,  0.3906250,
    0.3984375,  0.3984375,  0.4062500,  0.4140625,  0.4218750,  0.4296875,
    0.4296875,  0.4375000,  0.4453125,  0.4531250,  0.4609375,  0.4609375,
    0.4687500,  0.4765625,  0.4843750,  0.4921875,  0.5000000,  0.5000000,
    0.5078125,  0.5156250,  0.5234375,  0.5312500,  0.5390625,  0.5390625,
    0.5468750,  0.5546875,  0.5625000,  0.5703125,  0.5781250,  0.5859375,
    0.5937500,  0.5937500,  0.6015625,  0.6093750,  0.6171875,  0.6250000,
    0.6328125,  0.6406250,  0.6484375,  0.6562500,  0.6562500,  0.6640625,
    0.6718750,  0.6796875,  0.6875000,  0.6953125,  0.7031250,  0.7109375,
    0.7187500,  0.7265625,  -0.2656250, -0.2656250, -0.2656250, -0.2656250,
    -0.2656250, -0.2656250, -0.2656250, -0.2656250, -0.2656250, -0.2656250,
    -0.2656250, -0.2578125, -0.2578125, -0.2578125, -0.2578125, -0.2578125,
    -0.2578125, -0.2578125, -0.2578125, -0.2578125, -0.2500000, -0.2500000,
    -0.2500000, -0.2500000, -0.2500000, -0.2500000, -0.2500000, -0.2500000,
    -0.2421875, -0.2421875, -0.2421875, -0.2421875, -0.2421875, -0.2421875,
    -0.2343750, -0.2343750, -0.2343750, -0.2343750, -0.2343750, -0.2343750,
    -0.2265625, -0.2265625, -0.2265625, -0.2265625, -0.2265625, -0.2187500,
    -0.2187500, -0.2187500, -0.2187500, -0.2187500, -0.2109375, -0.2109375,
    -0.2109375, -0.2109375, -0.2109375, -0.2031250, -0.2031250, -0.2031250,
    -0.2031250, -0.1953125, -0.1953125, -0.1953125, -0.1953125, -0.1875000,
    -0.1875000, -0.1875000, -0.1875000, -0.1796875, -0.1796875, -0.1796875,
    -0.1796875, -0.1718750, -0.1718750, -0.1718750, -0.1640625, -0.1640625,
    -0.1640625, -0.1562500, -0.1562500, -0.1562500, -0.1562500, -0.1484375,
    -0.1484375, -0.1484375, -0.1406250, -0.1406250, -0.1406250, -0.1328125,
    -0.1328125, -0.1328125, -0.1250000, -0.1250000, -0.1171875, -0.1171875,
    -0.1171875, -0.1093750, -0.1093750, -0.1093750, -0.1015625, -0.1015625,
    -0.0937500, -0.0937500, -0.0937500, -0.0859375, -0.0859375, -0.0781250,
    -0.0781250, -0.0781250, -0.0703125, -0.0703125, -0.0625000, -0.0625000,
    -0.0625000, -0.0546875, -0.0546875, -0.0468750, -0.0468750, -0.0390625,
    -0.0390625, -0.0312500, -0.0312500, -0.0234375, -0.0234375, -0.0156250,
    -0.0156250, -0.0078125, -0.0078125, -0.0000000
};

// equidistant [-2, 1.984375], leakyrelu, 8 bits (2 int, 6 frac), 256 values
template <>
const c_t_6 lut<c_t_6>::c[256] = {
      0.000000,  0.015625,  0.015625,  0.031250,  0.031250,  0.046875,
      0.046875,  0.062500,  0.062500,  0.078125,  0.078125,  0.093750,
      0.109375,  0.109375,  0.125000,  0.125000,  0.140625,  0.156250,
      0.156250,  0.171875,  0.187500,  0.187500,  0.203125,  0.218750,
      0.218750,  0.234375,  0.250000,  0.250000,  0.265625,  0.281250,
      0.281250,  0.296875,  0.312500,  0.328125,  0.328125,  0.343750,
      0.359375,  0.375000,  0.375000,  0.390625,  0.406250,  0.421875,
      0.437500,  0.437500,  0.453125,  0.468750,  0.484375,  0.500000,
      0.515625,  0.515625,  0.531250,  0.546875,  0.562500,  0.578125,
      0.593750,  0.609375,  0.625000,  0.625000,  0.640625,  0.656250,
      0.671875,  0.687500,  0.703125,  0.718750,  0.734375,  0.750000,
      0.765625,  0.781250,  0.796875,  0.796875,  0.812500,  0.828125,
      0.843750,  0.859375,  0.875000,  0.890625,  0.906250,  0.921875,
      0.937500,  0.953125,  0.968750,  0.984375,  1.000000,  1.015625,
      1.031250,  1.046875,  1.062500,  1.078125,  1.093750,  1.109375,
      1.125000,  1.140625,  1.156250,  1.171875,  1.187500,  1.203125,
      1.218750,  1.250000,  1.265625,  1.281250,  1.296875,  1.312500,
      1.328125,  1.343750,  1.359375,  1.375000,  1.390625,  1.406250,
      1.421875,  1.437500,  1.453125,  1.468750,  1.484375,  1.500000,
      1.531250,  1.546875,  1.562500,  1.578125,  1.593750,  1.609375,
      1.625000,  1.640625,  1.656250,  1.671875,  1.687500,  1.703125,
      1.734375,  1.750000,  -0.234375, -0.234375, -0.234375, -0.250000,
      -0.250000, -0.250000, -0.250000, -0.250000, -0.250000, -0.250000,
      -0.250000, -0.250000, -0.250000, -0.250000, -0.250000, -0.265625,
      -0.265625, -0.265625, -0.265625, -0.265625, -0.265625, -0.265625,
      -0.265625, -0.265625, -0.265625, -0.265625, -0.265625, -0.265625,
      -0.265625, -0.265625, -0.265625, -0.265625, -0.281250, -0.281250,
      -0.281250, -0.281250, -0.281250, -0.281250, -0.281250, -0.281250,
      -0.281250, -0.281250, -0.281250, -0.281250, -0.281250, -0.281250,
      -0.281250, -0.281250, -0.281250, -0.281250, -0.281250, -0.281250,
      -0.281250, -0.281250, -0.281250, -0.281250, -0.281250, -0.281250,
      -0.281250, -0.281250, -0.265625, -0.265625, -0.265625, -0.265625,
      -0.265625, -0.265625, -0.265625, -0.265625, -0.265625, -0.265625,
      -0.265625, -0.265625, -0.250000, -0.250000, -0.250000, -0.250000,
      -0.250000, -0.250000, -0.250000, -0.250000, -0.234375, -0.234375,
      -0.234375, -0.234375, -0.234375, -0.234375, -0.218750, -0.218750,
      -0.218750, -0.218750, -0.218750, -0.203125, -0.203125, -0.203125,
      -0.203125, -0.187500, -0.187500, -0.187500, -0.187500, -0.171875,
      -0.171875, -0.171875, -0.156250, -0.156250, -0.156250, -0.140625,
      -0.140625, -0.140625, -0.125000, -0.125000, -0.125000, -0.109375,
      -0.109375, -0.109375, -0.093750, -0.093750, -0.078125, -0.078125,
      -0.078125, -0.062500, -0.062500, -0.046875, -0.046875, -0.031250,
      -0.031250, -0.015625, -0.015625, -0.000000
};

// equidistant [-4, 3.96875], leakyrelu, 8 bits (3 int, 5 frac), 256 values
template <>
const c_t_5 lut<c_t_5>::c[256] = {
    0.00000,  0.03125,  0.03125,  0.06250,  0.06250,  0.09375,  0.09375,
    0.12500,  0.12500,  0.15625,  0.18750,  0.18750,  0.21875,  0.25000,
    0.28125,  0.28125,  0.31250,  0.34375,  0.34375,  0.37500,  0.40625,
    0.43750,  0.46875,  0.46875,  0.50000,  0.53125,  0.56250,  0.59375,
    0.62500,  0.65625,  0.68750,  0.68750,  0.71875,  0.75000,  0.78125,
    0.81250,  0.84375,  0.87500,  0.90625,  0.93750,  0.96875,  1.00000,
    1.03125,  1.06250,  1.09375,  1.12500,  1.15625,  1.18750,  1.21875,
    1.25000,  1.28125,  1.31250,  1.34375,  1.40625,  1.43750,  1.46875,
    1.50000,  1.53125,  1.56250,  1.59375,  1.62500,  1.65625,  1.68750,
    1.71875,  1.75000,  1.78125,  1.84375,  1.87500,  1.90625,  1.93750,
    1.96875,  2.00000,  2.03125,  2.06250,  2.09375,  2.12500,  2.18750,
    2.21875,  2.25000,  2.28125,  2.31250,  2.34375,  2.37500,  2.40625,
    2.43750,  2.46875,  2.53125,  2.56250,  2.59375,  2.62500,  2.65625,
    2.68750,  2.71875,  2.75000,  2.78125,  2.81250,  2.84375,  2.90625,
    2.93750,  2.96875,  3.00000,  3.03125,  3.06250,  3.09375,  3.12500,
    3.15625,  3.18750,  3.21875,  3.25000,  3.31250,  3.34375,  3.37500,
    3.40625,  3.43750,  3.46875,  3.50000,  3.53125,  3.56250,  3.59375,
    3.62500,  3.65625,  3.68750,  3.71875,  3.75000,  3.78125,  3.84375,
    3.87500,  3.90625,  -0.06250, -0.06250, -0.06250, -0.06250, -0.09375,
    -0.09375, -0.09375, -0.09375, -0.09375, -0.09375, -0.09375, -0.09375,
    -0.09375, -0.09375, -0.09375, -0.09375, -0.09375, -0.09375, -0.09375,
    -0.09375, -0.12500, -0.12500, -0.12500, -0.12500, -0.12500, -0.12500,
    -0.12500, -0.12500, -0.12500, -0.12500, -0.12500, -0.12500, -0.15625,
    -0.15625, -0.15625, -0.15625, -0.15625, -0.15625, -0.15625, -0.15625,
    -0.15625, -0.15625, -0.15625, -0.18750, -0.18750, -0.18750, -0.18750,
    -0.18750, -0.18750, -0.18750, -0.18750, -0.18750, -0.18750, -0.21875,
    -0.21875, -0.21875, -0.21875, -0.21875, -0.21875, -0.21875, -0.21875,
    -0.21875, -0.21875, -0.25000, -0.25000, -0.25000, -0.25000, -0.25000,
    -0.25000, -0.25000, -0.25000, -0.25000, -0.25000, -0.25000, -0.25000,
    -0.25000, -0.28125, -0.28125, -0.28125, -0.28125, -0.28125, -0.28125,
    -0.28125, -0.28125, -0.28125, -0.28125, -0.28125, -0.28125, -0.28125,
    -0.28125, -0.28125, -0.28125, -0.28125, -0.28125, -0.28125, -0.28125,
    -0.28125, -0.28125, -0.25000, -0.25000, -0.25000, -0.25000, -0.25000,
    -0.25000, -0.25000, -0.25000, -0.21875, -0.21875, -0.21875, -0.21875,
    -0.21875, -0.18750, -0.18750, -0.18750, -0.15625, -0.15625, -0.15625,
    -0.15625, -0.12500, -0.12500, -0.12500, -0.09375, -0.09375, -0.06250,
    -0.06250, -0.03125, -0.03125, -0.00000
};

// equidistant [-8, 7.9375], leakyrelu, 8 bits (4 int, 4 frac), 256 values
template <>
const c_t_4 lut<c_t_4>::c[256] = {
      0.0000,  0.0625,  0.0625,  0.1250,  0.1250,  0.1875,  0.2500,  0.2500,
      0.3125,  0.3750,  0.4375,  0.4375,  0.5000,  0.5625,  0.6250,  0.6875,
      0.7500,  0.8125,  0.8750,  0.9375,  1.0000,  1.0625,  1.1250,  1.1875,
      1.2500,  1.3125,  1.3750,  1.4375,  1.5000,  1.5625,  1.6250,  1.6875,
      1.7500,  1.8125,  1.8750,  1.9375,  2.0625,  2.1250,  2.1875,  2.2500,
      2.3125,  2.3750,  2.4375,  2.5000,  2.5625,  2.6250,  2.7500,  2.8125,
      2.8750,  2.9375,  3.0000,  3.0625,  3.1250,  3.1875,  3.2500,  3.3125,
      3.3750,  3.4375,  3.5000,  3.6250,  3.6875,  3.7500,  3.8125,  3.8750,
      3.9375,  4.0000,  4.0625,  4.1250,  4.1875,  4.2500,  4.3125,  4.3750,
      4.4375,  4.5000,  4.5625,  4.6250,  4.6875,  4.7500,  4.8125,  4.8750,
      4.9375,  5.0000,  5.1250,  5.1875,  5.2500,  5.3125,  5.3750,  5.4375,
      5.5000,  5.5625,  5.6250,  5.6875,  5.7500,  5.8125,  5.8750,  5.9375,
      6.0000,  6.0625,  6.1250,  6.1875,  6.2500,  6.3125,  6.3750,  6.4375,
      6.5000,  6.5625,  6.6250,  6.6875,  6.7500,  6.8125,  6.8750,  6.9375,
      7.0000,  7.0625,  7.1250,  7.1875,  7.2500,  7.3125,  7.3750,  7.4375,
      7.5000,  7.5625,  7.6250,  7.6875,  7.7500,  7.8125,  7.8750,  7.9375,
      -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
      -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
      -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
      -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
      -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
      -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0625,
      -0.0625, -0.0625, -0.0625, -0.0625, -0.0625, -0.0625, -0.0625, -0.0625,
      -0.0625, -0.0625, -0.0625, -0.0625, -0.0625, -0.0625, -0.0625, -0.0625,
      -0.0625, -0.0625, -0.0625, -0.0625, -0.0625, -0.0625, -0.1250, -0.1250,
      -0.1250, -0.1250, -0.1250, -0.1250, -0.1250, -0.1250, -0.1250, -0.1250,
      -0.1250, -0.1250, -0.1250, -0.1875, -0.1875, -0.1875, -0.1875, -0.1875,
      -0.1875, -0.1875, -0.1875, -0.1875, -0.1875, -0.2500, -0.2500, -0.2500,
      -0.2500, -0.2500, -0.2500, -0.2500, -0.2500, -0.2500, -0.2500, -0.2500,
      -0.2500, -0.2500, -0.2500, -0.2500, -0.2500, -0.2500, -0.2500, -0.2500,
      -0.2500, -0.2500, -0.2500, -0.2500, -0.2500, -0.2500, -0.1875, -0.1875,
      -0.1875, -0.1875, -0.1250, -0.1250, -0.1250, -0.0625, -0.0625, -0.0000,
};

// equidistant [-16, 15.875], leakyrelu, 8 bits (5 int, 3 frac), 256 values
template <>
const c_t_3 lut<c_t_3>::c[256] = {
      0.000,  0.125,  0.125,  0.250,  0.250,  0.375,  0.500,  0.625,  0.750,
      0.875,  1.000,  1.125,  1.250,  1.375,  1.500,  1.625,  1.750,  1.875,
      2.000,  2.125,  2.250,  2.500,  2.625,  2.750,  2.875,  3.000,  3.125,
      3.250,  3.375,  3.500,  3.625,  3.750,  3.875,  4.000,  4.250,  4.375,
      4.500,  4.625,  4.750,  4.875,  5.000,  5.125,  5.250,  5.375,  5.500,
      5.625,  5.750,  5.875,  6.000,  6.125,  6.250,  6.375,  6.500,  6.625,
      6.750,  6.875,  7.000,  7.125,  7.250,  7.375,  7.500,  7.625,  7.750,
      7.875,  8.000,  8.125,  8.250,  8.375,  8.500,  8.625,  8.750,  8.875,
      9.000,  9.125,  9.250,  9.375,  9.500,  9.625,  9.750,  9.875,  10.000,
      10.125, 10.250, 10.375, 10.500, 10.625, 10.750, 10.875, 11.000, 11.125,
      11.250, 11.375, 11.500, 11.625, 11.750, 11.875, 12.000, 12.125, 12.250,
      12.375, 12.500, 12.625, 12.750, 12.875, 13.000, 13.125, 13.250, 13.375,
      13.500, 13.625, 13.750, 13.875, 14.000, 14.125, 14.250, 14.375, 14.500,
      14.625, 14.750, 14.875, 15.000, 15.125, 15.250, 15.375, 15.500, 15.625,
      15.750, 15.875, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000,
      -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000,
      -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000,
      -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000,
      -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000,
      -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000,
      -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000,
      -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000,
      -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000,
      -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000,
      -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.000, -0.125, -0.125,
      -0.125, -0.125, -0.125, -0.125, -0.125, -0.125, -0.125, -0.125, -0.125,
      -0.125, -0.125, -0.250, -0.250, -0.250, -0.250, -0.250, -0.250, -0.250,
      -0.250, -0.250, -0.250, -0.250, -0.250, -0.250, -0.250, -0.250, -0.250,
      -0.250, -0.125, -0.125, -0.000
};

// equidistant [-32, 31.75], leakyrelu, 8 bits (6 int, 2 frac), 256 values
template <>
const c_t_2 lut<c_t_2>::c[256] = {
      0.00,  0.25,  0.25,  0.50,  0.75,  1.00,  1.25,  1.50,  1.75,  2.00,
      2.25,  2.50,  2.75,  3.25,  3.50,  3.75,  4.00,  4.25,  4.50,  4.75,
      5.00,  5.25,  5.50,  5.75,  6.00,  6.25,  6.50,  6.75,  7.00,  7.25,
      7.50,  7.75,  8.00,  8.25,  8.50,  8.75,  9.00,  9.25,  9.50,  9.75,
      10.00, 10.25, 10.50, 10.75, 11.00, 11.25, 11.50, 11.75, 12.00, 12.25,
      12.50, 12.75, 13.00, 13.25, 13.50, 13.75, 14.00, 14.25, 14.50, 14.75,
      15.00, 15.25, 15.50, 15.75, 16.00, 16.25, 16.50, 16.75, 17.00, 17.25,
      17.50, 17.75, 18.00, 18.25, 18.50, 18.75, 19.00, 19.25, 19.50, 19.75,
      20.00, 20.25, 20.50, 20.75, 21.00, 21.25, 21.50, 21.75, 22.00, 22.25,
      22.50, 22.75, 23.00, 23.25, 23.50, 23.75, 24.00, 24.25, 24.50, 24.75,
      25.00, 25.25, 25.50, 25.75, 26.00, 26.25, 26.50, 26.75, 27.00, 27.25,
      27.50, 27.75, 28.00, 28.25, 28.50, 28.75, 29.00, 29.25, 29.50, 29.75,
      30.00, 30.25, 30.50, 30.75, 31.00, 31.25, 31.50, 31.75, -0.00, -0.00,
      -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00,
      -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00,
      -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00,
      -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00,
      -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00,
      -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00,
      -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00,
      -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00,
      -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00,
      -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00,
      -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00, -0.00,
      -0.00, -0.00, -0.00, -0.00, -0.25, -0.25, -0.25, -0.25, -0.25, -0.25,
      -0.25, -0.25, -0.25, -0.25, -0.25, -0.00
};

// equidistant [-64, 63.5], leakyrelu, 8 bits (7 int, 1 frac), 256 values
template <>
const c_t_1 lut<c_t_1>::c[256] = {
      0.0,  0.5,  0.5,  1.0,  2.0,  2.5,  3.0,  3.5,  4.0,  4.5,  5.0,  5.5,
      6.0,  6.5,  7.0,  7.5,  8.0,  8.5,  9.0,  9.5,  10.0, 10.5, 11.0, 11.5,
      12.0, 12.5, 13.0, 13.5, 14.0, 14.5, 15.0, 15.5, 16.0, 16.5, 17.0, 17.5,
      18.0, 18.5, 19.0, 19.5, 20.0, 20.5, 21.0, 21.5, 22.0, 22.5, 23.0, 23.5,
      24.0, 24.5, 25.0, 25.5, 26.0, 26.5, 27.0, 27.5, 28.0, 28.5, 29.0, 29.5,
      30.0, 30.5, 31.0, 31.5, 32.0, 32.5, 33.0, 33.5, 34.0, 34.5, 35.0, 35.5,
      36.0, 36.5, 37.0, 37.5, 38.0, 38.5, 39.0, 39.5, 40.0, 40.5, 41.0, 41.5,
      42.0, 42.5, 43.0, 43.5, 44.0, 44.5, 45.0, 45.5, 46.0, 46.5, 47.0, 47.5,
      48.0, 48.5, 49.0, 49.5, 50.0, 50.5, 51.0, 51.5, 52.0, 52.5, 53.0, 53.5,
      54.0, 54.5, 55.0, 55.5, 56.0, 56.5, 57.0, 57.5, 58.0, 58.5, 59.0, 59.5,
      60.0, 60.5, 61.0, 61.5, 62.0, 62.5, 63.0, 63.5, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
      -0.0, -0.5, -0.5, -0.0
};

// equidistant [-128, 127], leakyrelu, 8 bits (8 int, 0 frac), 256 values
template <>
const c_t_0 lut<c_t_0>::c[256] = {
      0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,
      15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
      30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
      45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
      60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,
      75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
      90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104,
      105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
      120, 121, 122, 123, 124, 125, 126, 127, -0,  -0,  -0,  -0,  -0,  -0,  -0,
      -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,
      -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,
      -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,
      -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,
      -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,
      -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,
      -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,
      -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,  -0,
      -0
};

template <typename input_t, typename output_t, typename c_t>
output_t leakyrelu(input_t x)
{
    #pragma HLS PIPELINE II = 1
    #pragma hls latency max = 1

    typedef ap_ufixed<8, 8, AP_RND_CONV, AP_SAT> abs_t;

    output_t y; 
    abs_t x_abs;

    x_abs[0] = x[0];
    x_abs[1] = x[1];
    x_abs[2] = x[2];
    x_abs[3] = x[3];
    x_abs[4] = x[4];
    x_abs[5] = x[5];
    x_abs[6] = x[6];
    x_abs[7] = x[7];
    
    y = lut<c_t>::c[x_abs];
    
    #pragma HLS BIND_STORAGE variable=lut<c_t>::c type=rom_1p impl=lutram

    return y;
}


}  // namespace nn2fpga

#endif  // NN2FPGA_ACTIVATIONS_UTILS_H_
