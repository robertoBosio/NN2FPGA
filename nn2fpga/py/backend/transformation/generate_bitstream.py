from qonnx.transformation.base import Transformation
from qonnx.core.modelwrapper import ModelWrapper
import numpy as np
import base64
import json
import os
import subprocess

def dump_tcl_script(top_name, part_name, frequency, hls_version, input_files):
    """Dump a TCL script to set up the HLS project and run the simulation."""

    argv = " ".join(input_files)
    tb_files = " ".join(input_files + ["testbench.cpp"])
    t_clk = f"{1e3 / int(frequency):.2f}ns" # Convert frequency in MHz to clock period in ns
    lines = list()
    lines.append("# Auto-generated TCL script for HLS project setup")
    lines.append("# Generated by nn2fpga simulation flow")
    lines.append("")

    # Check the HLS version to determine the correct syntax
    if float(hls_version) > 2025:
        lines.append(
            'open_component -reset "proj_{top_name}" -flow_target vivado',
        )
    else:
        lines.extend(
            [
                'open_project -reset "proj_{top_name}"',
                'open_solution -reset solution0',
            ]
        )

    lines.extend(
        [
            'add_files kernel.cpp -cflags " -I/workspace/NN2FPGA/nn2fpga/library/include"',
            'set_top "{top_name}"',
            'set_part {part_name}',
            'create_clock -period {t_clk}',
            'csynth_design',
            'export_design -format ip_catalog -ipname "{top_name}" -library "ml" -vendor "polito.nn2FPGA" -version "1.0" -description "Generated by nn2FPGA"',
            'exit',
        ]
    )

    return "\n".join(lines).format(
        top_name=top_name, tb_files=tb_files, part_name=part_name, t_clk=t_clk, argv=argv
    )

def make_build_dir(work_dir: str) -> None:
    """Create the working directory for the simulation."""
    os.makedirs(work_dir, exist_ok=True)

class GenerateBitstream(Transformation):

    def apply(self, model: ModelWrapper) -> tuple[ModelWrapper, bool]:
        json_blob = json.loads(blob)
        work_dir = json_blob["work_dir"]
        work_dir = f"{os.path.abspath(work_dir)}/sim"
        make_build_dir(work_dir)

        # Generate the TCL script
        tcl_script = dump_tcl_script(
            top_name=json_blob["top_name"],
            part_name=json_blob["part_name"],
            frequency=json_blob["frequency"],
            hls_version=json_blob["hls_version"],
        )

        # Write the TCL script to a file
        with open(f"{work_dir}/setup.tcl", "w") as f:
            f.write(tcl_script)

        # Write the HLS code to a file
        with open(f"{work_dir}/kernel.cpp", "w") as f:
            f.write(base64.b64decode(json_blob["hls_code_b64"]).decode())

        # Synthesize and export the design.
        subprocess.run(
            ["vitis_hls", "-f", f"{work_dir}/setup.tcl"],
            cwd=work_dir,
            check=True
        )

        return model, False