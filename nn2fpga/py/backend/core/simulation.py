import numpy as np
import base64
import json
import os
import subprocess

def dump_tcl_script(top_name, part_name, frequency, hls_version, input_files):
    """Dump a TCL script to set up the HLS project and run the simulation."""

    argv = " ".join(input_files)
    tb_files = " ".join(input_files + ["testbench.cpp"])
    t_clk = f"{1e3 / int(frequency):.2f}ns" # Convert frequency in MHz to clock period in ns
    lines = list()
    lines.append("# Auto-generated TCL script for HLS project setup")
    lines.append("# Generated by nn2fpga simulation flow")
    lines.append("")

    # Check the HLS version to determine the correct syntax
    if float(hls_version) > 2025:
        lines.append(
            'open_component -reset "proj_{top_name}" -flow_target vivado',
        )
    else:
        lines.extend(
            [
                'open_project -reset "proj_{top_name}"',
                'open_solution -reset solution0',
            ]
        )

    lines.extend(
        [
            'add_files kernel.cpp -cflags " -I/workspace/NN2FPGA/nn2fpga/library/include"',
            'add_files -tb "/workspace/NN2FPGA/deps/cnpy/cnpy.cpp"',
            'add_files -tb "{tb_files}" -cflags "-I/workspace/NN2FPGA/deps/cnpy -I/workspace/NN2FPGA/nn2fpga/library/include -lz"',
            'set_top "{top_name}"',
            'set_part {part_name}',
            'create_clock -period {t_clk}',
            'csim_design -argv "{argv}"',
            'csynth_design',
            'cosim_design -argv "{argv}"',
            'export_design -flow impl',
            'exit',
        ]
    )

    return "\n".join(lines).format(
        top_name=top_name, tb_files=tb_files, part_name=part_name, t_clk=t_clk, argv=argv
    )

def make_build_dir(work_dir: str) -> None:
    """Create the working directory for the simulation."""
    os.makedirs(work_dir, exist_ok=True)

def simulate(blob: str, context: dict) -> dict:

    json_blob = json.loads(blob)
    work_dir = json_blob["work_dir"]
    work_dir = f"{os.path.abspath(work_dir)}/sim"
    make_build_dir(work_dir)
    internal_context = list()
    input_list = list()
    output_list = list()

    # Update the context with the input map
    input_map = json_blob["input_map"]
    for old_name, new_name in input_map.items():
        if old_name in context:
            internal_context.append((new_name, context[old_name]))
    input_list.extend(sorted(input_map.values()))

    # Save the value of the constant inputs
    for tensor_name, tensor_data in json_blob["constant_inputs"].items():
        tensor = np.frombuffer(
            base64.b64decode(tensor_data["data_b64"]), dtype=tensor_data["dtype"]
        ).reshape(tensor_data["shape"])
        internal_context.append((tensor_name, tensor))
    input_list.extend(
        sorted(tensor_name for tensor_name in json_blob["constant_inputs"].keys())
    )

    # Update the context with the output map
    output_map = json_blob["output_map"]
    for old_name, new_name in output_map.items():
        if old_name in context:
            internal_context.append((new_name, context[old_name]))
    output_list.extend(sorted(output_map.values()))

    # Save to file the internal context
    for tensor_name, tensor_data in internal_context:
        np.save(f"{work_dir}/{tensor_name}.npy", tensor_data)

    # Generate the TCL script
    tcl_script = dump_tcl_script(
        top_name=json_blob["top_name"],
        part_name=json_blob["part_name"],
        frequency=json_blob["frequency"],
        hls_version=json_blob["hls_version"],
        input_files=[f"{work_dir}/{tensor_name}.npy" for tensor_name, _ in internal_context],
    )

    # Write the TCL script to a file
    with open(f"{work_dir}/setup.tcl", "w") as f:
        f.write(tcl_script)

    # Write the HLS code to a file
    with open(f"{work_dir}/kernel.cpp", "w") as f:
        f.write(base64.b64decode(json_blob["hls_code_b64"]).decode())

    # Generate the HLS driver code
    with open(f"{work_dir}/testbench.cpp", "w") as f:
        f.write(base64.b64decode(json_blob["hls_driver_b64"]).decode())

    # run the simulation
    subprocess.run(
        ["vitis_hls", "-f", f"{work_dir}/setup.tcl"],
        cwd=work_dir,
        check=True
    )

    # Read the output files and update the context
    for old_name, new_name in output_map.items():
        output_file = f"{work_dir}/{new_name}.npy"
        if os.path.exists(output_file):
            tensor_data = np.load(output_file)
            context[old_name] = tensor_data
        else:
            raise FileNotFoundError(f"Output file {output_file} not found.")

    return context
